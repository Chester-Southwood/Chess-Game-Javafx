package chessPiece;

import java.awt.Point;

import chessGame.Board;
import enumTypes.MoveType;
import enumTypes.PieceTeam;
import javafx.scene.paint.Color;

public class Queen extends Piece{

	public Queen(PieceTeam type, int x, int y) {
		super(type, x, y, Color.DARKGREEN);
	}

	@Override
	public PieceMoveResult move(int newX, int newY, Board board) {
		final int oldX = (int)(this.getOldX() + 100 / 2) / 100,
				  oldY = (int)(this.getOldY() + 100 / 2) / 100;     
        
        final boolean isVerticle = newX == oldX && newY != oldY,
					  isHorizontal = newX != oldX && newY == oldY,
					  isDiagonal = Math.abs(newX - oldX) == Math.abs(newY - oldY),
					  isLegalMovement = (isVerticle || isHorizontal || isDiagonal),
					  isPieceThere = board.getTile(newX, newY).hasPiece(),
					  isAllyPieceThere = isPieceThere ? board.getTile(newX, newY).getPiece().getType() == this.getType() : false;

        if (isLegalMovement && !isAllyPieceThere) {
        	if(isVerticle) { //has same x axis
            	System.out.println("HIT VERTICLE");
        		int highest = Math.max(oldY, newY);
        		int lowest = Math.min(oldY, newY) + 1;
        		
        		System.out.println("highest is " + highest);
        		System.out.println("lowest is " + (lowest));

        		while(lowest < highest) {
        			System.out.println(lowest);
        			if(board.getTile(newX, lowest).hasPiece()) {
        				System.out.println("ILLEGAL MOVE");
        				return new PieceMoveResult(MoveType.NONE);
        			}
        			lowest++;
        		}
        	}
        	
        	if(isHorizontal) { //has same x axis'
            	System.out.println("HIT HORIZONTAL");
        		int highest = Math.max(oldX, newX);
        		int lowest = Math.min(oldX, newX) + 1;
        		
        		System.out.println("highest is " + highest);
        		System.out.println("lowest is " + (lowest));

        		while(lowest < highest) {
        			System.out.println(lowest);
        			if(board.getTile(lowest, newY).hasPiece()) {
        				System.out.println("ILLEGAL MOVE");
        				return new PieceMoveResult(MoveType.NONE);
        			}
        			lowest++;
        		}
        	}
        	
        	if(isDiagonal) {
        		System.out.println("HIT DIAGONAL");
        		boolean isTopRightToBottomLeft = oldX < newX && oldY < newY; //|| oldX > newX && oldY > newY;
        		if(isTopRightToBottomLeft) {
        			int smaller = Math.min(oldX, oldY);
        			System.out.println(smaller);
        			if(smaller == oldX) {
        				for(int i = 1; Math.abs(newX - oldX) > i; i++) {
        					if(board.getTile(oldX + i, oldY + i).hasPiece()) {
        						System.out.println("TOP LEFT BOTTOM RIGHT");
        						System.out.println("ERROR");
        						return new PieceMoveResult(MoveType.NONE);
        					}
        				}
        			} else {
        				System.out.println("DIFFERENCE " + Math.abs(newX - oldX));
        				for(int i = 1; Math.abs(newX - oldX) > i; i++) {
        					System.out.println("TRYING");
        					if(board.getTile(oldX - i, oldY - i).hasPiece()) {
        						System.out.println("ERROR");
        						return new PieceMoveResult(MoveType.NONE);
        					}
        				}
            		}
        		} else if(oldX > newX && oldY > newY) {
        			System.out.println("HIT");
        		}
        	}
        	
        	System.out.println("NEITHER");
        	
            final boolean isEnemyPieceThere = isPieceThere 
            		? board.getTile(newX, newY).getPiece().getType() != this.getType() 
            		: false;
            
        	return isEnemyPieceThere 
        			? new PieceMoveResult(MoveType.KILL, board.getTile(newX, newY).getPiece())
        			: new PieceMoveResult(MoveType.NORMAL);
        } else {
        	return new PieceMoveResult(MoveType.NONE);
        }
	}

}
